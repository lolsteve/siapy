"""
Wallet API.
"""
from sia.constants import wallet as wallet_constants
from sia.mixins.http import Http


class Wallet:
    """
    Implement wallet-API for Sia storage.
    """

    def __init__(self):
        self.http = Http()

    def get_wallet(self):
        """
        Returns information aout the wallet.
        """
        return self.http.get(wallet_constants.INFO_URL)

    def load_033x(self, source, encryptionpassword):
        """
        Loads a v0.3.3.x wallet into the current wallet.
        """
        payload = {
            'source': source,
            'encryptionpassword': encryptionpassword,
        }
        self.http.post(wallet_constants.V_033X_URL, payload)

    def get_address(self):
        """
        Returns a single address from the wallet.
        """
        return self.http.get(wallet_constants.ADDRESS_URL).get('address')

    def get_addresses(self):
        """
        Returns a list of addresses from the wallet.
        """
        return self.http.get(wallet_constants.ADDRESS_LIST_URL).get('addresses')

    def backup_wallet(self, destination):
        """
        Creates a backup of the wallet settings.
        """
        payload = {
            'destination': destination,
        }
        return self.http.get(wallet_constants.BACKUP_URL, payload)

    def wallet_init(self, encryptionpassword=None):
        """
        Initializes a new wallet.
        Returns the wallet seed.
        """
        payload = None
        if encryptionpassword is not None:
            payload = {
                'encryptionpassword': encryptionpassword,
            }
        return self.http.post(wallet_constants.INIT_URL, payload).get('primaryseed')

    def wallet_load_seed(self, encryptionpassword, seed, dictionary='english'):
        """
        Gives the wallet a seed to track when looking for incoming transactions
        """
        payload = {
            'encryptionpassword': encryptionpassword,
            'dictionary': dictionary,
            'seed': seed,
        }
        return self.http.post(wallet_constants.SEED_URL, payload)

    def wallet_seeds(self, dictionary='english'):
        """
        Returns the list of seeds in use by the wallet
        """
        payload = {
            'dictionary': dictionary,
        }
        return self.http.get(wallet_constants.SEEDS_URL, payload)

    def send_siacoins(self, amount, address):
        """
        Sends siacoins to an address or set of addresses
        Returns list of transaction IDs
        """
        payload = {
            'amount': amount,
            'destination': address,
        }
        return self.http.post(wallet_constants.SIACOINS_URL, payload).get('transactionids')

    def send_siafunds(self, amount, address):
        """
        Sends siafunds to an address.
        Returns a list of transaction IDs.
        """
        payload = {
            'amount': amount,
            'destination': address,
        }
        return self.http.post(wallet_constants.SIAFUNDS_URL, payload).get('transactionids')

    def load_siagkey(self, encryptionpassword, keyfiles):
        """
        Loads a key into the wallet that was generated by siag.
        """
        payload = {
            'encryptionpassword': encryptionpassword,
            'keyfiles': keyfiles,
        }
        return self.http.post(wallet_constants.SIAGKEY_URL, payload)

    def lock_wallet(self):
        """
        Locks the wallet.
        """
        return self.http.post(wallet_constants.LOCK_URL)

    def get_transaction(self, transaction_id):
        """
        Gets the transaction associated with a specific transaction id.
        """
        return self.http.get(wallet_constants.TRANSACTION_URL + transaction_id).get('transaction')

    def get_transactions(self, startheight, endheight):
        """
        Returns a list of transactions related to the wallet in chronological order.
        """
        return self.http.get(
            wallet_constants.TRANSACTIONS_URL + '?startheight=%d&endheight=%d' % (startheight, endheight),
        )

    def get_transactions_related(self, address):
        """
        Returns a list of transactions related to the given address.
        """
        return self.http.get(wallet_constants.TRANSACTIONS_URL + address).get('transactions')

    def unlock_wallet(self, encryptionpassword):
        """
        Unlocks the wallet.
        """
        payload = {'encryptionpassword': encryptionpassword}
        return self.http.post(wallet_constants.UNLOCK_URL, payload)

    def verify_address(self, address):
        """
        Returns if the given address is valid
        """
        return self.http.get(wallet_constants.VERIFY_URL + address).get('Valid')

    def change_password(self, encryptionpassword, newpassword):
        """
        Changes the wallet's encryption key.
        """
        payload = {
            'encryptionpassword': encryptionpassword,
            'newpassword': newpassword,
        }
        return self.http.post(wallet_constants.CHANGE_PASSWORD_URL, payload)
